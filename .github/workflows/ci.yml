# Zero-Clause BSD License

# Copyright (C) 2023 Toitware ApS.

# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

name: CI

on:
  workflow_dispatch:
    inputs:
      sign_macos:
        description: Sign the macOS binary
        type: boolean
        required: true
        default: false
      sign_windows:
        description: Sign the Windows binary
        type: boolean
        required: true
        default: false
  release:
    types: [published]
  push:
    branches:
      - "*"
      - "*/*"

env:
  TOIT_VERSION: v2.0.0-alpha.122
  APP_NAME: partitions

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Toit
        shell: bash
        run: |
          if [[ "$RUNNER_OS" = "Windows" ]]; then
            BIN_EXTENSION=".exe"
          fi
          echo "BIN_EXTENSION=$BIN_EXTENSION" >> $GITHUB_ENV

          export NATIVE_DOWNLOAD_DIR="${{ github.workspace }}/downloads"
          echo "NATIVE_DOWNLOAD_DIR=$NATIVE_DOWNLOAD_DIR" >> $GITHUB_ENV

          export DOWNLOAD_DIR="$PWD/downloads"
          echo "DOWNLOAD_DIR=$DOWNLOAD_DIR" >> $GITHUB_ENV

          TOIT_SDK_DIR=$DOWNLOAD_DIR/toit
          echo "TOIT_EXEC=$TOIT_SDK_DIR/bin/toit.run$BIN_EXTENSION" >> $GITHUB_ENV
          echo "TOITC_EXEC=$TOIT_SDK_DIR/bin/toit.compile$BIN_EXTENSION" >> $GITHUB_ENV
          echo "TPKG_EXEC=$TOIT_SDK_DIR/bin/toit.pkg$BIN_EXTENSION" >> $GITHUB_ENV

          TOIT_SDK_FILE=toit-$(echo $RUNNER_OS | tr '[:upper:]' '[:lower:]').tar.gz
          TOIT_SDK_BASE_URL=https://github.com/toitlang/toit/releases

          echo "TOIT_SDK_URL=$TOIT_SDK_BASE_URL/download/$TOIT_VERSION/$TOIT_SDK_FILE" >> $GITHUB_ENV

      - uses: suisei-cn/actions-download-file@v1.6.0
        name: Download Toit
        with:
          url: ${{ env.TOIT_SDK_URL }}
          target: ${{ env.NATIVE_DOWNLOAD_DIR }}

      - name: Extract Toit
        shell: bash
        run: |
          cd "$DOWNLOAD_DIR"
          for f in *.tar.gz; do
            tar x -f $f
          done
          ls $TOIT_EXEC
          ls $TOITC_EXEC
          ls $TPKG_EXEC

      # Fetch the dependencies. Different for each platform.
      - name: Install dependencies - Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build
          ninja --version
          cmake --version
      - name: Install dependencies - macOS
        if: runner.os == 'macOS'
        run: |
          brew install ninja
          ninja --version
          cmake --version
      - name: Install dependencies - Windows
        if: runner.os == 'Windows'
        run: |
          choco install ninja
          ninja --version
          cmake --version

      - name: Run cmake
        shell: bash
        run: |
          make rebuild-cmake
          cmake \
              -DTOITC="$TOITC_EXEC" \
              -DTOITPKG="$TPKG_EXEC" \
              -DTOITRUN="$TOIT_EXEC" \
              build

      - name: Build binaries
        shell: bash
        run: |
          make

      - name: Tar.gz Linux executable
        if: runner.os == 'Linux'
        run: |
          tar c -zvf build/${{env.APP_NAME}}-linux.tar.gz -C build ${{env.APP_NAME}}

      - name: Sign Windows binary
        if: runner.os == 'Windows' && (github.event_name == 'release' || inputs.sign_windows)
        uses: toitlang/action-code-sign@a4adedba46f2630ed60a1d6e6aa828ac7038c945 # v1.0.0
        with:
          certificate: ${{ secrets.DIGICERT_CERTIFICATE }}
          api-key: ${{ secrets.DIGICERT_API_KEY }}
          certificate-password: ${{ secrets.DIGICERT_PASSWORD }}
          certificate-fingerprint: ${{ secrets.DIGICERT_FINGERPRINT }}
          keypair-alias: ${{ vars.DIGICERT_KEYPAIR_ALIAS }}
          path: build/${{env.APP_NAME}}.exe

      - name: Zip Windows binary
        if: runner.os == 'Windows'
        run: |
          cd build
          7z a ${{env.APP_NAME}}-windows.zip ${{env.APP_NAME}}.exe

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ runner.os }}
          path: build/${{env.APP_NAME}}${{ env.BIN_EXTENSION }}

      - name: Upload Linux tar.gz
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: binaries-Linux-tar
          path: build/${{env.APP_NAME}}-linux.tar.gz

      - name: Upload Windows zip
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: binaries-Windows-zip
          path: build/${{env.APP_NAME}}-windows.zip

      - name: Upload release Linux executable
        if: github.event_name == 'release' && runner.os == 'Linux'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/${{env.APP_NAME}}-linux.tar.gz
          tag: ${{ github.event.release.tag_name }}
          overwrite: true

      - name: Upload release Windows executable
        if: github.event_name == 'release' && runner.os == 'Windows'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/${{env.APP_NAME}}-windows.zip
          tag: ${{ github.event.release.tag_name }}
          overwrite: true

  sign_macos:
    runs-on: macos-latest
    needs: [build]
    if: github.event_name == 'release' || inputs.sign_macos
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: binaries-macOS
          path: in

      - name: Install dependencies
        run: |
          set -e
          brew install create-dmg
          brew install zip

      - name: Copy to build
        run: |
          mkdir -p build
          cp in/${{env.APP_NAME}} build/${{env.APP_NAME}}

      - name: Setup binary rights
        run: |
          chmod +x build/${{env.APP_NAME}}

      - name: Sign and notarize
        uses: toitlang/action-macos-sign-notarize@v1.1.1
        with:
          certificate: ${{ secrets.MACOS_CERTIFICATE }}
          certificate-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          username: ${{ secrets.AC_USERNAME }}
          password: ${{ secrets.AC_PASSWORD }}
          apple-team-id: 33DS2ZRDST
          # Signs in place.
          app-path: build/${{env.APP_NAME}}

      - name: Create out folder
        run: |
          mkdir -p out

      - name: Create a DMG
        run: |
          # Use an empty directory as source so we don't accidentally add other files than the
          # ${{env.APP_NAME}} binary.
          set -e
          mkdir empty
          create-dmg \
              --volname "${{env.APP_NAME}}" \
              --add-file ${{env.APP_NAME}} build/${{env.APP_NAME}} 0 0 \
              out/${{env.APP_NAME}}-macos.dmg \
              empty

      - name: Create a ZIP
        run: |
          zip -j out/${{env.APP_NAME}}-macos.zip build/${{env.APP_NAME}}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-macOS-signed
          path: ./out

      - name: Upload release macOS executable DMG
        if: github.event_name == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: out/${{env.APP_NAME}}-macos.dmg
          tag: ${{ github.event.release.tag_name }}
          overwrite: true

      - name: Upload release macOS executable ZIP
        if: github.event_name == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: out/${{env.APP_NAME}}-macos.zip
          tag: ${{ github.event.release.tag_name }}
          overwrite: true
